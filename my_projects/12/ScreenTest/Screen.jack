// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array twoToThe;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, pwr_2_i;
        let color = true;
        let twoToThe = Array.new(16);
        let i = 0;
        let pwr_2_i = 1;
        while (i < 16) {
            let twoToThe[i] = pwr_2_i;
            let pwr_2_i = pwr_2_i + pwr_2_i;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function int mod(int x, int y) {
        return (x - ((x / y) * y));
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(16384 + address);
        if (~color) {
            let value = ~(twoToThe[Screen.mod(x, 16)]) & value;
        }
        else {
            let value = twoToThe[Screen.mod(x, 16)] | value;
        }
        do Memory.poke((16384 + address), value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, drawB, diff, dx, dy, dirY, tmp;
        if (y1 = y2) {  // horizontal line
            let a = Math.min(x1, x2);
            let b = Math.max(x1, x2);
            while (~(a > b)) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }
        if (x1 = x2) {  // vertical line
            let a = Math.min(y1, y2);
            let b = Math.max(y1, y2);
            while (~(a > b)) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }
            return;
        }
        // always draw from left to right
        if (x1 > x2) {
            let tmp = x2;
            let x2 = x1;
            let x1 = tmp;
            let tmp = y2;
            let y2 = y1;
            let y1 = tmp;
        }
        let dx = x2 - x1; // must > 0
        let dy = Math.abs(y2 - y1);
        let a = 0;
        let b = 0;
        let drawB = 0;
        let dirY = 1;
        if ((y2 - y1) < 0) {
            let dirY = -1;
        }
        let diff = 0;
        //let diff = (a * dy) - (b * dx); // b/a  vs  dy/dx
        while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
            do Screen.drawPixel((x1 + a), (y1 + drawB));
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            }
            else {
                let b = b + 1;
                let drawB = drawB + dirY;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int from, to;
        let from = Math.min(y1, y2);
        let to = Math.max(y1, y2);
        while (~(from > to)) {
            do Screen.drawLine(x1, from, x2, from);
            let from = from + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int tmp;
        let r = Math.min(r, 181);
        let dy = -r;
        while (dy < (r + 1)) {
            let tmp = Math.sqrt(((r * r) - (dy * dy)));
            do Screen.drawLine((x - tmp), (y + dy), (x + tmp), (y + dy));
            let dy = dy + 1;
        }
        return;
    }
}
