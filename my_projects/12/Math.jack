// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, pwr_2_i;
        let twoToThe = Array.new(16);
        let i = 0;
        let pwr_2_i = 1;
        while (i < 16) {
            let twoToThe[i] = pwr_2_i;
            let pwr_2_i = pwr_2_i + pwr_2_i;
            let i = i + 1;
        }
        return;
    }

    // Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
        return (~((x & twoToThe[i]) = 0));
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean is_neg;
        var int q;
        if (((x > 0) & (y < 0)) | ((x < 0) & (y > 0))) {
            let is_neg = true;
        }
        else {
            let is_neg = false;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        if ((y > x) | (y < 0)) {
            return 0;
        }
        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            if (is_neg) {
                return (-2) * q;
            }
            else {
                return 2 * q;
            }
        }
        else {
            if (is_neg) {
                return ((2 * q) + 1) * (-1);
            }
            else {
                return (2 * q) + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, pwr_2_j;
        let y = 0;
        let j = 7;
        do Output.println();
        while ((j > 0) | (j = 0)) {
            if (((((y + twoToThe[j]) * (y + twoToThe[j])) < x) | (((y + twoToThe[j]) * (y + twoToThe[j])) = x)) & (((y + twoToThe[j]) * (y + twoToThe[j])) > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        }
        else {
            return a; 
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        else {
            return a; 
        }
    }

    /** Returns the modulo of x / y */
    function int mod(int x, int y) {
        return (x - ((x / y) * y));
    }
}
