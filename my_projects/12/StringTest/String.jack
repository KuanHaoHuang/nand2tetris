// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len;
    field Array str_arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        if (~(maxLength > 0)) {
            let maxLength = 1;
        }
        let str_arr = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str_arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str_arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str_arr[len] = c;
        let len = len + 1;
        return this;
    }

    /** Appends String s to this string's end and returns this string. */ 
    method String append(String s) {
        var int i;
        let i = 0;
        while (i < s.length()) {
            let str_arr[len] = s.charAt(i);
            let i = i + 1;
            let len = len + 1;
        }
        return str_arr;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        var boolean b, neg;
        let i = 0;
        let val = 0;
        let b = true;
        let neg = false;
        while ((i < len) & b) {
            if ((i = 0) & (str_arr[i] = 45)) {
                let neg = true;
            }
            else {
                if ((str_arr[i] > 47) & (str_arr[i] < 58)) {
                    let val = (val * 10) + (str_arr[i] - 48);
                } 
                else {
                    if (neg) {
                        return -val;
                    }
                    else {
                        return val;
                    }
                }
            }
            let i = i + 1;
        }
        if (neg) {
            return -val;
        }
        else {
            return val;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var boolean neg;
        var String val_str;
        var int i;
        let neg = false;
        if (val < 0) {
            let neg = true;
            let val_str = String.int2String(-val);
        }
        else {
            let val_str = String.int2String(val);
        }
        let i = 0;
        let len = 0;
        if (neg) {
            let len = 1;
            let str_arr[0] = 45;
        }
        while (i < val_str.length()) {
            let str_arr[len] = val_str.charAt(i);
            let len = len + 1;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns the string representation of a non-negative integer */
    function String int2String(int val) {
        var int d, i;
        var String c, tmp;
        var boolean b;
        let c = String.new(6);
        let d = val - ((val / 10) * 10);
        let i = 10000;
        let b = false;
        while (i > 0) {
            if (val > i) {
                do c.appendChar((val / i) + 48);
                let b = true;
                let val = val - ((val / i) * i);
            }
            else {
                if (b) {
                    do c.appendChar(48);
                }
            }
            let i = i / 10;
        }
        // do Output.printString(c);
        return c;
        /*
        if (val < 10) {
            return c.appendChar(val + 48);
        }
        else {
            let tmp = String.int2String(val/10);
            return tmp.append(c);
        }
        */
    }

    /** Returns the integer value of a string
        of digit characters, 
        assuming that str[0] represents the most significant digit */
    function int string2Int(String s) {
        var int val, i;
        let val = 0;
        while (i < s.length()) {
            let val = val * 10 + (s.charAt(i) - 48);
        } 
        return val;
    }
}
