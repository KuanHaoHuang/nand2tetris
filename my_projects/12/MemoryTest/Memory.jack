// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int lastFreeList;
        var int thisListAddr;
        var boolean moved;
        let moved = false;
        while (freeList[1] < size) {
            let moved = true;
            let lastFreeList = freeList;
            let freeList = freeList[0];
        } // found proper sized freeList
        let thisListAddr = freeList + 2;
        let freeList = thisListAddr + size;
        let freeList[1] = ram[thisListAddr - 1] - size - 2;
        let freeList[0] = 0;
        if (moved) {
            let lastFreeList[0] = freeList;
        }
        let ram[thisListAddr - 2] = 0; // next
        let ram[thisListAddr - 1] = size; // size
        return thisListAddr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // first_freeList --> (deAlloc_array) --> second_freeList
        let heap[o - 2] = freeList[0];
        let freeList[0] = o;
        return;
    }    
}
